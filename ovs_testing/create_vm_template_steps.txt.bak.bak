

# Install virtualization environment and openvswitch on the host

# Create a VM using virt-install, pointing to the target distribution location.  A sample script is below:

[root@netqe7 home]# cat vm_rhel72.sh

#!/bin/bash
#

#############################################################
vm=rhel7.2
distro=http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose/Server/x86_64/os/
optional=http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose/Server/x86_64/os/
#############################################################
echo "
distro=$distro
vm=$vm
"
#############################################################
# - tidy up any prior installation of this VM
virsh destroy $vm
virsh undefine $vm --managed-save
virsh vol-delete --pool default /var/lib/libvirt/images/$vm.qcow2
virsh pool-refresh default
#############################################################
cat <<EOF > ks.cfg
# Kickstart file automatically generated by anaconda.

#version=DEVEL
install
url --url=$distro
lang en_US.UTF-8
keyboard us
network --onboot yes --device eth0 --bootproto dhcp
timezone --utc America/New_York
rootpw  redhat
selinux --enforcing
authconfig --enableshadow --passalgo=sha512
firewall --service=ssh
reboot

# The following is the partition information you requested
# Note that any partitions you deleted are not expressed
# here so unless you clear all partitions first, this is
# not guaranteed to work
zerombr
clearpart --linux --drives=vda

part pv.252002 --grow --size=500
volgroup vg --pesize=32768 pv.252002
logvol swap --name=lv_swap --vgname=vg --grow --size=2000 --maxsize=4000
logvol / --fstype=ext4 --name=lv_root --vgname=vg --grow --size=1024 --maxsize=51200
part /boot --fstype=ext4 --size=500

bootloader --location=mbr --timeout=5 --append="crashkernel=auto rhgb quiet console=ttyS0,115200"

%packages
@base
#@core
#@development tools
%end
EOF

#############################################################
pwd=$(pwd)
virt-install --name $vm --vcpus 2 --ram 2048 --vnc --location $distro --disk path=/var/lib/libvirt/images/$vm.qcow2,format=qcow2,size=8,bus=virtio --network bridge=virbr0,model=virtio --initrd-inject=$pwd/ks.cfg --extra-args "ks=file:/ks.cfg"
#############################################################

exit

--------------------------------------------------------------------------------------------------------------------------------

# Start VM, connect to the console, verify the IP address assigned to the VM via DHCP

[root@netqe7 home]# virsh list --all
 Id    Name                           State
----------------------------------------------------
 -     rhel7.2                        shut off

[root@netqe7 home]# virsh start rhel7.2
Domain rhel7.2 started

[root@netqe7 home]# virsh list --all
 Id    Name                           State
----------------------------------------------------
 3     rhel7.2                        running

[root@netqe7 home]# virsh console 3
Connected to domain rhel7.2
Escape character is ^]

Red Hat Enterprise Linux Server 7.2 (Maipo)
Kernel 3.10.0-290.el7.x86_64 on an x86_64

localhost login: root
Password: 
Last login: Tue Jul 14 14:52:33 from 192.168.122.1
[root@localhost ~]# ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP qlen 1000
    link/ether 52:54:00:ce:44:cb brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.12/24 brd 192.168.122.255 scope global dynamic eth0
       valid_lft 3548sec preferred_lft 3548sec
    inet6 fe80::5054:ff:fece:44cb/64 scope link 
       valid_lft forever preferred_lft forever
[root@localhost ~]# 

--------------------------------------------------------------------------------------------------------------------------------
# From the host, ping the guest IP ethN address referenced above.  If ping is successful, skip the "Create OVS bridge" step below

# Create OVS bridge, add inport to the OVS bride, assign IP address to intport on same subnet as VM to allow IP connectivity between host and guest
[root@netqe7 ~]# ovs-vsctl add-br myovs
[root@netqe7 ~]# ovs-vsctl add-port myovs intport0 -- set interface intport0 type=internal
[root@netqe7 ~]# ip addr add dev intport0 192.168.122.10/24

-------------------------------------------------------------------------------------------------------------------------------

# Download netperf rpm to host
[root@netqe7 ~]# wget http://pkgs.repoforge.org/netperf/netperf-2.6.0-1.el6.rf.x86_64.rpm

# Copy netperf rpm to guest
[root@netqe7 ~]# scp netperf-2.6.0-1.el6.rf.x86_64.rpm root@192.168.122.12:/home

# Install netperf on VM
[root@localhost ~]# rpm -ivh netperf-2.6.0-1.el6.rf.x86_64.rpm

### Repeat the above steps for any addtional packages that you would like installed on the VM (iperf, etc.)

# Install gcc on guest (if necessary).  Note: this may require updating your repo files to gain access the gcc package
[root@localhost ~]# yum -y install gcc

# Disable firewall, iptables, ip6tables, etc. so they will not have to be disabled during the automation runs (if so desired)
systemctl mask firewalld
systemctl stop firewalld
systemctl disable iptables
systemctl disable ip6tables
chkconfig iptables off
chkconfig ip6tables off
service iptables stop
service ip6tables stop
setenforce 0

# Shutdown VM
[root@netqe7 ~]# virsh shutdown rhel7.2

# scp qcow2 image file to http server for future use
[root@netqe7 images]# scp /var/lib/libvirt/images/rhel7.2.qcow2 user@http_server.redhat.com

This image will now include all of the installed packages, including netperf, when used to create future VMs.

Then create a generic xml file from the VM to create future VMs based on it.  On host (with VM shutdown):

[root@netqe7 images]# virsh dumpxml rhel7.2 > vm_rhel72.xml
[root@netqe7 images]# scp vm_rhel72.xml ralongi@ralongi.usersys.redhat.com:./xml_files
I then edit the XML file to use to define and start VM in my automation. (virsh define vm_rhel72.xml; virsh start $vm).  An example of the generic XML file I create:
[ralongi@ralongi xml_files]$ cat vm_rhel72.xml
<domain type='kvm'>
  <name>g1</name>
  <memory unit='KiB'>2097152</memory>
  <vcpu placement='static'>2</vcpu>
  <os>
    <type arch='x86_64' machine='pc'>hvm</type>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/libexec/qemu-kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2' cache='none'/>
      <source file='/var/lib/libvirt/images/rhel7.2.qcow2'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <interface type='bridge'>
       <source bridge='myovs'/>
      <virtualport type='openvswitch'>
      <parameters/>
      </virtualport>
      <target dev='vnet0'/>
      <model type='virtio'/>
      <alias name='net0'/>
     </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <input type='tablet' bus='usb'/>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='-1' autoport='yes'/>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </memballoon>
  </devices>
</domain>





