# to manually set up topology tests

###############################################################################
###############################################################################

From QJ:

To manually run, I use it like this in two steps.
STEP 1.  Setup test environment
export OVS_TOPO=setup 
this will only run setup to prepare test environment, including to create vm

STEP 2. Run test
to run a certain test case
export OVS_TOPO=ovs_test_xxxx  

to run all test cases
export OVS_TOPO=ovs_all or unset OVS_TOPO 

export OVS_SKIP_SETUP_ENV=yes
this will skip both setup and cleanup

###############################################################################
###############################################################################

# provision system using /home/ralongi/scripts/provision.sh
# /home/ralongi/inf_ralongi/scripts/provision.sh netqe9.knqe.lab.eng.bos.redhat.com RHEL-7.5

# install beaker stuff
# RHEL 7:

echo "sslverify=false" >> /etc/yum.conf

# install wget in case it's missing
yum -y install wget

# install beaker-client.repo
wget -O /etc/yum.repos.d/beaker-client.repo http://download.lab.bos.redhat.com/beakerrepos/beaker-client-RedHatEnterpriseLinux.repo

# install beaker related packages
yum -y install rhts-test-env beakerlib rhts-devel rhts-python beakerlib-redhat beaker-client beaker-redhat
yum -y install rhts-test-env beakerlib rhts-python beakerlib-redhat

# create beaker-tasks.repo file
(
	echo [beaker-tasks]
	echo name=beaker-tasks
	echo baseurl=http://beaker.engineering.redhat.com/rpms
	echo enabled=1
	echo gpgcheck=0
	echo skip_if_unavailable=1
) > /etc/yum.repos.d/beaker-tasks.repo


# install git
git_install()
{
	if [ $# -gt 0 ]; then 
		git_dir=$1
	else
		git_dir="/mnt/git_repo"
	fi
	
	echo "Installing Git if not already installed and cloning repo..."
    yum -y install git || true
    mkdir "$git_dir"
	pushd "$git_dir" && git clone git://pkgs.devel.redhat.com/tests/kernel && popd
}

#pull down git repo
#git_install /mnt/git_repo

git_install /mnt/tests

# RHEL 8:

yum install -y http://download.eng.bos.redhat.com/beakerrepos/harness-testing/RedHatEnterpriseLinux8/beakerlib-1.17-19.el8bkr.noarch.rpm
yum install -y http://download.eng.bos.redhat.com/beakerrepos/harness-testing/RedHatEnterpriseLinux8/restraint-0.1.37-1.el8bkr.x86_64.rpm
yum install -y http://download.eng.bos.redhat.com/beakerrepos/harness-testing/RedHatEnterpriseLinux8/restraint-rhts-0.1.37-1.el8bkr.x86_64.rpm

python_major_ver=$(rpm -q platform-python | awk -F "-" '{print $3}' | awk -F "." '{print $1}')
python_pkg_ver=$(rpm -q platform-python | awk -F "-" '{print $3}' | awk -F "." '{print $1$2}')
yum -y install python"$python_pkg_ver"
yum -y install python"$python_major_ver"-tkinter

git_install() {
    if rpm -q git 2>/dev/null; then
        echo "Git is already installed; doing a git pull"; cd /mnt/tests/kernel; git pull
        return 0
    else
            yum -y install git
            mkdir /mnt/tests
        cd /mnt/tests && git clone git://pkgs.devel.redhat.com/tests/kernel
    fi
}
git_install

alias python=/usr/libexec/platform-python

. /mnt/tests/kernel/networking/common/include.sh

export OVS_TOPO=setup
#export OVS_TOPO="ovs_test_nic"
#export OVS_TOPO="ovs_test_bond_set_active_slave ovs_test_bond_set_active_slave ovs_test_bond_set_active_slave ovs_test_bond_lacp_active ovs_test_bond_lacp_active ovs_test_bond_lacp_passive ovs_test_bond_lacp_passive ovs_test_bond_balance_slb ovs_test_chained_with_veth"
export NIC_DRIVER="i40e"
export RPM_CONTAINER_SELINUX_POLICY="http://download.devel.redhat.com/brewroot/packages/container-selinux/2.77/1.el7_6/noarch/container-selinux-2.77-1.el7_6.noarch.rpm"
export RPM_OVS_SELINUX_EXTRA_POLICY="http://download.devel.redhat.com/brewroot/packages/openvswitch-selinux-extra-policy/1.0/11.el8fdp/noarch/openvswitch-selinux-extra-policy-1.0-11.el8fdp.noarch.rpm"
export RPM_OVS="http://download.devel.redhat.com/brewroot/packages/openvswitch2.11/2.11.0/4.el8fdp/x86_64/openvswitch2.11-2.11.0-4.el8fdp.x86_64.rpm"

export NAY="yes"
export PVT="no"
export JOBID="12345"
export image_name="rhel8.0.qcow2"
export OVS_SKIP_CLEANUP_ENV="yes"
export CLIENTS="netqe20.knqe.lab.eng.bos.redhat.com"
export SERVERS="netqe21.knqe.lab.eng.bos.redhat.com"

From QJ:

To manually run, I use it like this in two steps.
STEP 1.  Setup test environment
export OVS_TOPO=setup 
this will only run setup to prepare test environment, including to create vm

STEP 2. Run test
to run a certain test case
export OVS_TOPO=ovs_test_xxxx  

to run all test cases
export OVS_TOPO=ovs_all or unset OVS_TOPO 

export OVS_SKIP_SETUP_ENV=yes
this will skip both setup and cleanup

pushd /mnt/tests/kernel/networking/openvswitch/topo

make run




