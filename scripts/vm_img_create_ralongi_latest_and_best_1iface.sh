#!/bin/bash
#

# usage:
# provision a beaker machine, ex. netqe18.knqe.lab.eng.bos.redhat.com
# change root's passwd to redhat
# run command below in office machine
#
# ./vm_image.sh netqe18.knqe.lab.eng.bos.redhat.com
#

TERM=xterm sshpass -p redhat ssh -X -o UserKnownHostsFile=/dev/null -o "StrictHostKeyChecking=no" root@$1 << 'EOF'

yum -y install xauth

yum -y install bridge-utils
yum -y install virt-install virt-viewer libvirt
test -f /etc/yum.repos.d/beaker-tasks.repo && mv /etc/yum.repos.d/beaker-tasks.repo /root/beaker-tasks.repo
yum -y install qemu-kvm
test -f /root/beaker-tasks.repo && mv /root/beaker-tasks.repo /etc/yum.repos.d/beaker-tasks.repo

service libvirtd restart
service virtlogd restart

EOF


TERM=xterm sshpass -p redhat ssh -X -o UserKnownHostsFile=/dev/null -o "StrictHostKeyChecking=no" root@$1  << 'EOF'

cat <<'SCRIPT' > vm_img_tmp.sh
#!/bin/bash
#

TARGET_IMAGE=${TARGET_IMAGE:-rhel7.4}

rhel_version=$(cut -f1 -d. /etc/redhat-release | sed 's/[^0-9]//g')
if (($rhel_version <= 6)); then
	DISTRO=${DISTRO:-"http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-6/compose/Server/x86_64/os/"}
	OPTIONAL=${OPTIONAL-"http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-6/compose/Server/optional/x86_64/os/"}
else
	DISTRO=${DISTRO:-"http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose/Server/x86_64/os/"}
	OPTIONAL=${OPTIONAL-"http://download.eng.bos.redhat.com/rel-eng/latest-RHEL-7/compose/Server-optional/x86_64/os/"}
fi

echo $TARGET_IMAGE
echo $DISTRO
echo $OPTIONAL

vm=guest${RANDOM}

rm -rf $TARGET_IMAGE.qcow2

# - tidy up any prior installation of this VM
#virsh destroy $vm
#virsh undefine --managed-save --snapshots-metadata --remove-all-storage $vm
#virsh vol-delete --pool default /var/lib/libvirt/images/$vm.qcow2
#virsh pool-refresh default

cat << KS_CFG > ks.cfg
# Kickstart file automatically generated by anaconda.

#version=DEVEL
install
url --url=$DISTRO
lang en_US.UTF-8
keyboard us
network --onboot yes --device eth0 --bootproto dhcp
timezone --utc America/New_York
rootpw  redhat
selinux --enforcing
authconfig --enableshadow --passalgo=sha512
firewall --service=ssh
reboot

# The following is the partition information you requested
# Note that any partitions you deleted are not expressed
# here so unless you clear all partitions first, this is
# not guaranteed to work
zerombr
clearpart --linux --drives=vda

part pv.252002 --grow --size=500
volgroup vg --pesize=32768 pv.252002
logvol swap --name=lv_swap --vgname=vg --grow --size=2000 --maxsize=4000
logvol / --fstype=ext4 --name=lv_root --vgname=vg --grow --size=1024 --maxsize=51200
part /boot --fstype=ext4 --size=500

bootloader --location=mbr --timeout=5 --append="crashkernel=auto rhgb quiet console=ttyS0,115200"

%packages
@base
@core
-@X Window System
-@development tools
%end

%post
# open console output

# add repo to do installation
cat >/etc/yum.repos.d/beaker-Server.repo <<REPO
[beaker-Server]
name=beaker-Server
baseurl=$DISTRO
enabled=1
gpgcheck=0
skip_if_unavailable=1
REPO

cat >/etc/yum.repos.d/beaker-Server-optional.repo <<REPO
[beaker-Server-optional]
name=beaker-Server-optional
baseurl=$OPTIONAL
enabled=1
gpgcheck=0
skip_if_unavailable=1
REPO

cat >/etc/yum.repos.d/infra01-server.repo <<REPO
[infra01-server]
name=infra01-server
baseurl=http://netqe-infra01.knqe.lab.eng.bos.redhat.com/repo
enabled=1
gpgcheck=0
skip_if_unavailable=1
REPO

# install gcc
yum install -y lksctp-tools lksctp-tools-devel
yum -y install gcc

# install netperf
##wget ftp://ftp.netperf.org/netperf/netperf-*.tar.bz2
wget http://netqe-bj.usersys.redhat.com/share/tools/netperf-20160222.tar.bz2
tar xjvf netperf-*.tar.bz2
pushd netperf-*
./configure --enable-sctp && make && make install
popd
rm -rf netperf-*
# install iperf
cd /tmp
wget http://netqe-infra01.knqe.lab.eng.bos.redhat.com/repo/packages/iperf-2.0.5-11.el6.x86_64.rpm
rpm -ivh iperf-2.0.5-11.el6.x86_64.rpm
rm -f iperf*

# setup ifcfg-eth0
cat >/etc/sysconfig/network-scripts/ifcfg-eth0 <<ETH0
DEVICE="eth0"
BOOTPROTO="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
USERCTL="yes"
PEERDNS="yes"
IPV6INIT="no"
PERSISTENT_DHCLIENT="1"
ETH0
ip link set eth0 up

sleep 5
rm -rf "/etc/udev/rules.d/$(ls /etc/udev/rules.d | grep persistent-net)"

%end
KS_CFG

virt-install --name $vm \
	--vcpus 2 \
	--ram 2048 \
	--graphics vnc,listen=0.0.0.0 \
	--location $DISTRO \
	--disk path=/var/lib/libvirt/images/$vm.qcow2,format=qcow2,size=8,bus=virtio \
	--network bridge=virbr0,model=virtio \
	--initrd-inject=$(pwd)/ks.cfg \
	--extra-args "ks=file:/ks.cfg" \
	--noreboot

virsh shutdown $vm
while virsh list | grep $vm > /dev/null
do
	sleep 5
done

qemu-img convert -O qcow2 /var/lib/libvirt/images/$vm.qcow2 $TARGET_IMAGE.qcow2

virsh undefine --managed-save --snapshots-metadata --remove-all-storage $vm
rm -rf ks.cfg

exit
SCRIPT

bash vm_img_tmp.sh
rm -rf vm_img_tmp.sh

EOF
